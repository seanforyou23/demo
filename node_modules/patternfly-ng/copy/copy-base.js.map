{"version":3,"sources":["../../build/src/app/copy/copy-base.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,YAAY,EACZ,KAAK,EACL,MAAM,GACP,MAAM,eAAA,CAAgB;AAKvB;;GAEG;AACH;IA2CE;;OAEG;IACH,kBAAsB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAnC9C;;WAEG;QACF,qBAAgB,GAAW,KAAK,CAAC;QAElC;;WAEG;QACF,uBAAkB,GAAW,mBAAmB,CAAC;QAElD;;WAEG;QACF,4BAAuB,GAAW,KAAK,CAAC;QAYzC;;WAEG;QACF,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;QAErB,oBAAe,GAAY,KAAK,CAAC;IAKQ,CAAC;IAOlD,sBAAI,oCAAc;QALlB;;;;WAIG;aACH;YACE,OAAO,IAAI,CAAC,eAAe,CAAC;QAC9B,CAAC;;;OAAA;IAED;;OAEG;IACH,uBAAI,GAAJ;QAAA,iBAaC;QAZC,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;aACL,CAAC,CAAC;YAChB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;YACpC,UAAU,CAAC;gBACT,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;gBAC7B,KAAI,CAAC,kBAAkB,GAAG,mBAAmB,CAAC;YAChD,CAAC,EAAE,IAAI,CAAC,CAAC;SACV;IACH,CAAC;IACI,uBAAc,GAA2C;QAChE,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAG,EAAE,EAAE;QAClE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,aAAa,EAAG,EAAE,EAAE;QAC1D,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAG,EAAE,EAAE;QACpE,oBAAoB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,oBAAoB,EAAG,EAAE,EAAE;QACxE,yBAAyB,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,yBAAyB,EAAG,EAAE,EAAE;QAClF,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;QAC9C,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;QAC9C,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAG,EAAE,EAAE;KAChD,CAAC;IACF,eAAC;CApFD,AAoFC,IAAA;SApFqB,QAAQ","file":"copy-base.js","sourceRoot":"","sourcesContent":["import {\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\n\nimport { CopyEvent } from './copy-event';\nimport { CopyService } from './copy-service/copy.service';\n\n/**\n * A config containing properties for copy components\n */\nexport abstract class CopyBase {\n  /**\n   * Copy button aria label (announced to screen readers)\n   */\n   buttonAriaLabel: string;\n\n  /**\n   * A tooltip that describes the value to be copied\n   */\n   tooltipText: string;\n\n  /**\n   * Placement for the tooltip\n   */\n   tooltipPlacement: string = 'top';\n\n  /**\n   * A tooltip that describes what the copy button does\n   */\n   copyBtnTooltipText: string = 'Copy to Clipboard';\n\n  /**\n   * Placement for the copy button tooltip\n   */\n   copyBtnTooltipPlacement: string = 'top';\n\n  /**\n   * The value to be copied to the clipboard\n   */\n   value: string;\n\n  /**\n   * A width to set on the copy container\n   */\n   width: string;\n\n  /**\n   * Event emitted when values are copied to the clipboard\n   */\n   onCopy = new EventEmitter();\n\n  private _recentlyCopied: boolean = false;\n\n  /**\n   * Default constructor\n   */\n  constructor(protected copyService: CopyService) {}\n\n  /**\n   * Returns the flag indicating copy action has just happened\n   *\n   * @returns {boolean} True if copy action has been triggered\n   */\n  get recentlyCopied(): boolean {\n    return this._recentlyCopied;\n  }\n\n  /**\n   * Copy given value to the clipboard\n   */\n  copy(): void {\n    let result = this.copyService.copy(this.value);\n    if (result) {\n      this.onCopy.emit({\n        value: this.value\n      } as CopyEvent);\n      this._recentlyCopied = true;\n      this.copyBtnTooltipText = 'Copied!';\n      setTimeout(() => {\n        this._recentlyCopied = false;\n        this.copyBtnTooltipText = 'Copy to Clipboard';\n      }, 3000);\n    }\n  }\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'buttonAriaLabel': [{ type: Input, args: ['buttonAriaLabel', ] },],\n'tooltipText': [{ type: Input, args: ['tooltipText', ] },],\n'tooltipPlacement': [{ type: Input, args: ['tooltipPlacement', ] },],\n'copyBtnTooltipText': [{ type: Input, args: ['copyBtnTooltipText', ] },],\n'copyBtnTooltipPlacement': [{ type: Input, args: ['copyBtnTooltipPlacement', ] },],\n'value': [{ type: Input, args: ['value', ] },],\n'width': [{ type: Input, args: ['width', ] },],\n'onCopy': [{ type: Output, args: ['onCopy', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}