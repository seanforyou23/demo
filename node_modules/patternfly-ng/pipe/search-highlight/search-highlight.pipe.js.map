{"version":3,"sources":["../../../build/src/app/pipe/search-highlight/search-highlight.pipe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAA,EAAoB,MAAO,eAAA,CAAgB;AAEpD;;;;;;;;;;;;;;;;;GAiBG;AAEH;IAAA;IA4CA,CAAC;IA3CC;;;;;;OAMG;IACH,uCAAS,GAAT,UAAU,GAAW,EAAE,MAAc;QACnC,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7C,IAAI,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;YACjC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;YAC9B,IAAI,CAAC,QAAQ;gBAAE,OAAO,EAAE,CAAC;;gBACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;SAC/F;aAAM;YACL,OAAO,GAAG,CAAC;SACZ;IACH,CAAC;IAEO,+CAAiB,GAAzB,UAA0B,GAAW,EAAE,QAAgB;QACrD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBAClB,KAAK,GAAG,IAAI,CAAC;gBACb,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;aAClB;iBAAM,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACzB,KAAK,GAAG,KAAK,CAAC;gBACd,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;aAClB;iBAAM,IAAI,CAAC,KAAK,EAAE;gBACjB,MAAM,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;aACzB;iBAAM;gBACL,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;aAClB;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IACI,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,EAAG,EAAE;KACpD,CAAC;IACF,kBAAkB;IACX,kCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,0BAAC;CA5CD,AA4CC,IAAA;SA5CY,mBAAmB","file":"search-highlight.pipe.js","sourceRoot":"","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Search highlight pipe\n *\n * This is currently used with the type ahead feature of the filter fields component\n *\n * Usage:\n * <code><pre>\n * // Individual module import\n * import { SearchHighlightPipeModule } from 'patternfly-ng/pipe';\n * // Or\n * import { SearchHighlightPipeModule } from 'patternfly-ng';\n *\n * &#64;NgModule({\n *   imports: [SearchHighlightPipeModule,...]\n * })\n * export class AppModule(){}\n * </pre></code>\n */\n\nexport class SearchHighlightPipe implements PipeTransform {\n  /**\n   * Transform the substring matching the given search\n   *\n   * @param {string} val The string to highlight\n   * @param {string} search The text to search for\n   * @returns {any} The given string with highlighted text\n   */\n  transform(val: string, search: string): any {\n    if (search !== undefined && search.length > 0) {\n      let lowerVal = val.toLowerCase();\n      search = search.toLowerCase();\n      if (!lowerVal) return '';\n      else return this.convertToOriginal(lowerVal.split(search).join('<b>' + search + '</b>'), val);\n    } else {\n      return val;\n    }\n  }\n\n  private convertToOriginal(str: string, original: string): string {\n    let output = '';\n    let inTag = false;\n    let j = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '<') {\n        inTag = true;\n        output += str[i];\n      } else if (str[i] === '>') {\n        inTag = false;\n        output += str[i];\n      } else if (!inTag) {\n        output += original[j++];\n      } else {\n        output += str[i];\n      }\n    }\n    return output;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'searchHighlight' }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}